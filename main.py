import config
import logging

from aiogram import Bot, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import CommandHelp, ChatTypeFilter
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.deep_linking import get_startgroup_link
from aiogram.utils.executor import start_webhook
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ChatType


logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(ChatTypeFilter([ChatType.PRIVATE, ChatType.SENDER]), commands=['start'])
async def start_bot(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    link = await get_startgroup_link('true')
    button = InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç', link)
    keyboard.add(button)
    return SendMessage(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç!\n–Ø üá∫üá¶ –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é!\n–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: /help', reply_markup=keyboard)


@dp.message_handler(CommandHelp())
async def bot_help(message: types.Message):
    text = "–¶–µ –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é —ñ –π–æ–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
    text += "\n–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
    text += "/start - —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
    text += "/register - —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\n"
    text += "/game - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É\n"
    text += "/help - –¥–æ–≤—ñ–¥–∫–∞\n"
    text += "/leave - –ø–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É\n"
    return SendMessage(message.chat.id, text)


async def change_member(chat, chat_member_id):
    bot_obj = await bot.get_me()
    bot_id = bot_obj.id

    if chat_member_id == bot_id:
        text = '–ü—Ä–∏–≤—ñ—Ç!\n–Ø üá∫üá¶ –±–æ—Ç –¥–ª—è –≥—Ä–∏ –≤ –ú–∞—Ñ—ñ—é!\n'
        if chat.type in (ChatType.GROUP,ChatType.SUPERGROUP):
            bot_privs = await bot.get_chat_member(chat.id, bot_id)
            if bot_privs['status'] == 'administrator':
                if bot_privs['can_delete_messages'] and bot_privs['can_pin_messages'] and bot_privs['can_pin_messages']:
                    text += '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –≤–≤–µ–¥–∏ /register'
            if text == '':
                text += '–î–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n'
                text += '- –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n'
                text += '- –û–±–º–µ–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤\n'
                text += '- –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å'
        else:
            text += '–ë–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ\n'
            text += '–î–æ–¥–∞–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—É –∑ —ñ–Ω—à–∏–º–∏ —É—á–∞—Å–Ω–∏–∫–∞–º–∏'
        return SendMessage(chat.id, text)
    return 0


@dp.my_chat_member_handler()
async def member_update(my_chat_member: types.ChatMemberUpdated):
    if my_chat_member.new_chat_member.status in ('kicked', 'left'):
        logging.info(f'Kick bot from chat_id = {my_chat_member.chat.id}')
        return 0
    return await change_member(my_chat_member.chat, my_chat_member.new_chat_member.user.id)


@dp.message_handler(content_types=['new_chat_members'])
async def new_member(message: types.Message):
    for chat_member in message.new_chat_members:
        await change_member(message.chat, chat_member.id)


@dp.message_handler()
async def echo(message: types.Message):
    return SendMessage(message.chat.id, message.text)


async def on_startup(dp):
    logging.info("Configure webhook...")
    await bot.delete_webhook()
    if config.WEBHOOK_USE:
        await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown(dp):
    logging.warning('Shutting down..')

    # Remove webhook (not acceptable in some cases)
    await bot.delete_webhook()

    # Close DB connection (if used)
    await dp.storage.close()
    await dp.storage.wait_closed()

    logging.warning('Bye!')


def main():
    if config.WEBHOOK_USE:
        start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=config.SKIP_UPDATES,
            host=config.WEBAPP_HOST,
            port=config.WEBAPP_PORT,
        )
    else:
        executor.start_polling(dp, skip_updates=config.SKIP_UPDATES)


if __name__ == '__main__':
    main()
